// prisma/schema.prisma - Con modelos de laboratorio + USUARIOS Y AUDIT

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// ============================================
// üë§ MODELOS DE USUARIO Y AUTENTICACI√ìN
// ============================================

model Usuario {
  id                   Int       @id @default(autoincrement())
  email                String    @unique
  password             String    // hasheada con bcrypt
  nombres              String
  apellidos            String
  rol                  RolUsuario @default(MEDICO)
  especialidad         String?   // para m√©dicos
  activo               Boolean   @default(true)
  ultimoAcceso         DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  // Audit trail
  accesos              AccesoLog[]
  accionesCreadas      AuditLog[] @relation("UsuarioCreador")
  failedLoginAttempts Int       @default(0)
  lastFailedLogin     DateTime?
  
  @@map("Usuario")
}

enum RolUsuario {
  ADMIN           // Administrador del sistema
  MEDICO          // M√©dico con acceso completo
  ENFERMERA       // Personal de enfermer√≠a
  ADMINISTRATIVO  // Personal administrativo
  
  @@map("RolUsuario")
}

model AccesoLog {
  id            Int       @id @default(autoincrement())
  fechaAcceso   DateTime  @default(now())
  ip            String?
  userAgent     String?
  exitoso       Boolean
  motivoFallo   String?   // si no fue exitoso
  
  usuario       Usuario?  @relation(fields: [usuarioId], references: [id], onDelete: SetNull)
  usuarioId     Int?
  emailIntento  String    // para casos de email incorrecto
  
  @@map("AccesoLog")
}

model AuditLog {
  id            Int       @id @default(autoincrement())
  accion        String    // "CREATE_PATIENT", "UPDATE_CONSULTATION", etc.
  tabla         String    // "Paciente", "Consulta", etc.
  registroId    Int?      // ID del registro afectado
  datosAnteriores Json?   // estado anterior (para updates)
  datosNuevos   Json?     // estado nuevo
  ip            String?
  userAgent     String?
  createdAt     DateTime  @default(now())
  
  usuario       Usuario   @relation("UsuarioCreador", fields: [usuarioId], references: [id], onDelete: Cascade)
  usuarioId     Int
  
  @@map("AuditLog")
}

// ============================================
// üè• MODELOS M√âDICOS EXISTENTES (SIN CAMBIOS)
// ============================================

model Paciente {
  id                   Int       @id @default(autoincrement())
  nombres              String
  apellidos            String
  numeroIdentificacion String    @unique
  fechaNacimiento      DateTime?
  sexo                 String?
  email                String?   @unique
  telefono             String?
  direccion            String?
  grupoSanguineo       String?
  foto                 String?
  alergias             Json?
  contactoEmergencia   Json?
  qrCode               String?
  qrData               String?
  notas                String?
  edad                 Int?

  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  consultas            Consulta[]
  laboratorios         Laboratorio[]
  laboratoriosArchivos LaboratorioArchivo[]
}

model Consulta {
  id                 Int       @id @default(autoincrement())
  fechaConsulta      DateTime  @default(now())
  motivo             String?
  padecimientoActual String?
  signosVitales      String?
  exploracionFisica  String?
  diagnostico        String?
  tratamiento        String?
  examenes           String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  paciente    Paciente  @relation(fields: [pacienteId], references: [id], onDelete: Cascade)
  pacienteId  Int

  laboratorios Laboratorio[]
  laboratoriosArchivos LaboratorioArchivo[]
}

model Laboratorio {
  id               Int       @id @default(autoincrement())
  archivo          String
  url              String
  fechaInforme     DateTime?
  resumenHallazgos String
  resultados       String
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  paciente    Paciente  @relation(fields: [pacienteId], references: [id], onDelete: Cascade)
  pacienteId  Int

  consulta   Consulta? @relation(fields: [consultaId], references: [id], onDelete: SetNull)
  consultaId Int?
}

model LaboratorioArchivo {
  id                Int       @id @default(autoincrement())
  nombreArchivo     String
  urlArchivo        String
  fechaInforme      DateTime?
  resumenHallazgos  String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  paciente    Paciente  @relation(fields: [pacienteId], references: [id], onDelete: Cascade)
  pacienteId  Int

  consulta   Consulta? @relation(fields: [consultaId], references: [id], onDelete: SetNull)
  consultaId Int?

  resultados LaboratorioResultado[]

  @@map("LaboratorioArchivo")
}

model LaboratorioResultado {
  id                Int       @id @default(autoincrement())
  prueba            String
  valor             String
  unidad            String?
  rango             String?
  createdAt         DateTime  @default(now())

  laboratorioArchivo   LaboratorioArchivo @relation(fields: [laboratorioArchivoId], references: [id], onDelete: Cascade)
  laboratorioArchivoId Int

  @@map("LaboratorioResultado")
}